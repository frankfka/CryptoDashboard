{"version":3,"sources":["util/TablePaginationActions.js","market_overview/components/TopTable.js","util/SimplePriceChart.js","market_overview/components/CoinDetails.js","market_overview/TopTenOverview.js","market_overview/components/MoversTable.js","market_overview/LatestActivity.js","market_overview/NewsFeed.js","market_overview/MarketOverview.js","util/SortTableHeader.js","portfolio/components/Holdings.js","portfolio/Portfolio.js","Dashboard.js","settings/ApiKeyForm.js","App.js","index.js"],"names":["TablePaginationActions","handleFirstPageButtonClick","event","_this","props","onChangePage","handleBackButtonClick","page","handleNextButtonClick","handleLastPageButtonClick","Math","max","ceil","count","rowsPerPage","_this$props","this","theme","react_default","a","createElement","className","IconButton_default","onClick","disabled","aria-label","direction","LastPage_default","FirstPage_default","KeyboardArrowRight_default","KeyboardArrowLeft_default","React","Component","withStyles","withTheme","TopTable","state","handleChangePage","setState","_this2","data","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","slice","map","ticker","index","key","CoinInfo","Name","e","rowClicked","selected","selectedTickerIndex","component","scope","src","ImageUrl","alt","FullName","DISPLAY","USD","PRICE","RAW","CHANGEPCT24HOUR","concat","TableFooter_default","TablePagination_default","colSpan","length","rowsPerPageOptions","ActionsComponent","TablePaginationActionsWrapped","SimplePriceChart","primaryColor","palette","primary","main","labels","timePoint","Date","time","datasets","borderColor","backgroundColor","pointRadius","close","options","tooltips","enabled","legend","display","scales","xAxes","type","gridLines","unit","timePeriod","yAxes","ticks","callback","value","values","es","dist_default","name","color","NUM_DAYS","NUM_MIN","NUM_HR","DAY_URL","HOUR_URL","MIN_URL","TIME_PERIOD_DAY","CoinDetails","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","timePeriodSelected","newTimePeriod","preventDefault","fetchData","limit","url","auth","fetch","then","res","json","result","console","log","chartIsLoaded","chartData","Data","chartTimePeriod","error","coinInfo","displayUSD","ButtonGroup_default","Button_default","variant","active","util_SimplePriceChart","MKTCAP","TOTALVOLUME24HTO","OPEN24HOUR","HIGH24HOUR","LOW24HOUR","prevProps","prevState","TopTenOverview","tableRowClicked","Row_default","Col_default","xs","components_TopTable","bind","components_CoinDetails","selectedTicker","MoversTable","header","showHeaders","components_MoversTable","topGainers","topLosers","isLoaded","results","Spinner","require","newsItem","id","href","target","rel","title","react_moment_dist_default","format","published_at","source","fetchInterval","setInterval","clearInterval","MarketOverview","keys","cryptocompare","topChartsData","sortedBy24HrPrice","sort","b","topTenGainers","topTenLosers","reverse","market_overview_TopTenOverview","LatestActivity","NewsFeed","cryptopanic","SortTableHeader","createSortHandler","property","onRequestSort","order","orderBy","headers","sortDirection","Tooltip_default","placement","enterDelay","TableSortLabel_default","label","ASC","DESC","TICKER_COL_ID","BALANCE_COL_ID","BTC_VAL_COL_ID","USD_VAL_COL_ID","TABLE_HEADERS","NUM_COLS","Holdings","handleRequestSort","getSortingFunction","amount","toLowerCase","btcVal","usdVal","holdings","_this$state","numEmptyRows","min","util_SortTableHeader","holding","toFixed","pow","style","height","Portfolio","binance_url","binance","secret","balances","prices_url","join","balance","conversion","btcConversion","usdConversion","BTC","push","binanceHoldings","components_Holdings","MKT_OVERVIEW","Dashboard","open","selection","handleDrawerOpen","handleDrawerClose","handleSelect","text","pageToShow","market_overview_MarketOverview","portfolio_Portfolio","AppBar_default","Toolbar_default","Menu_default","Typography_default","noWrap","Drawer_default","anchor","ChevronLeft_default","Divider_default","List_default","ListItem_default","button","ListItemText_default","hidden","ApiKeyForm","cryptopanicKey","cryptocompareKey","binanceKey","binanceSecret","onFieldChanged","stateKey","defineProperty","onFormSubmission","parentCallback","TextField_default","placeholder","margin","onChange","core_Button_default","newKeysEntered","App","ls","set","window","location","reload","src_Dashboard","settings_ApiKeyForm","get","createMuiTheme","blue","secondary","amber","typography","useNextVariants","fontFamily","render","styles","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.ec0da7cf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\n\r\n\r\n/**\r\n * Component for Pagination\r\n */\r\nclass TablePaginationActions extends React.Component {\r\n\r\n    // Sets page # to 0\r\n    handleFirstPageButtonClick = event => {\r\n      this.props.onChangePage(event, 0);\r\n    };\r\n  \r\n    // Decreases page #\r\n    handleBackButtonClick = event => {\r\n      this.props.onChangePage(event, this.props.page - 1);\r\n    };\r\n  \r\n    // Increases page #\r\n    handleNextButtonClick = event => {\r\n      this.props.onChangePage(event, this.props.page + 1);\r\n    };\r\n  \r\n    // Sets page # to the max \r\n    handleLastPageButtonClick = event => {\r\n      this.props.onChangePage(event,\r\n        Math.max(0, Math.ceil(this.props.count / this.props.rowsPerPage) - 1),\r\n      );\r\n    };\r\n  \r\n    render() {\r\n      const {count, page, theme, rowsPerPage} = this.props;\r\n  \r\n      return (\r\n        <div className=\"table-pagination\">\r\n  \r\n          <IconButton\r\n            onClick={this.handleFirstPageButtonClick}\r\n            disabled={page === 0}\r\n            aria-label=\"First Page\">\r\n            {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n          </IconButton>\r\n  \r\n          <IconButton\r\n            onClick={this.handleBackButtonClick}\r\n            disabled={page === 0}\r\n            aria-label=\"Previous Page\">\r\n            {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n          </IconButton>\r\n  \r\n          <IconButton\r\n            onClick={this.handleNextButtonClick}\r\n            disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n            aria-label=\"Next Page\">\r\n            {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n          </IconButton>\r\n  \r\n          <IconButton\r\n            onClick={this.handleLastPageButtonClick}\r\n            disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n            aria-label=\"Last Page\">\r\n            {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n          </IconButton>\r\n  \r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // Exported pagination with styles from theme\r\n  export default withStyles({}, { withTheme: true })(\r\n    TablePaginationActions,\r\n  );","import React, { Component } from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport TablePaginationActionsWrapped from '../../util/TablePaginationActions'\r\n\r\nconst CRYPTOCOMPARE_ROOT_URL = \"https://www.cryptocompare.com/\"\r\nconst ROWS_PER_PAGE = 10\r\n\r\nclass TopTable extends Component {\r\n\r\n  state = {\r\n    page: 0\r\n  };\r\n\r\n  // This gets called by the pagination class (passed as a prop)\r\n  handleChangePage = (event, page) => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  render() {\r\n\r\n    let data = this.props.data\r\n\r\n    // Only load table if data is available\r\n    if (data) {\r\n      let page = this.state.page\r\n      return (\r\n          <Table className=\"top-charts-table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>#</TableCell>\r\n                <TableCell>Ticker</TableCell>\r\n                <TableCell>Name</TableCell>\r\n                <TableCell>Price (USD)</TableCell>\r\n                <TableCell>24 Hr Change (%)</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {data.slice(page * ROWS_PER_PAGE, (page + 1) * ROWS_PER_PAGE).map( (ticker, index) => (\r\n\r\n                <TableRow \r\n                  className=\"cursor-pointer\" \r\n                  key={ticker.CoinInfo.Name} \r\n                  onClick={((e) => this.props.rowClicked(e, index + page*10))}\r\n                  selected={index === (this.props.selectedTickerIndex - page*10)}\r\n                >\r\n                  <TableCell className=\"table-index-coln\">{index + 1 + page*10}</TableCell>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    <img className=\"ticker-img\" src={CRYPTOCOMPARE_ROOT_URL+ticker.CoinInfo.ImageUrl} alt={ticker.CoinInfo.Name}/>&nbsp;&nbsp;{ticker.CoinInfo.Name}\r\n                  </TableCell>\r\n                  <TableCell>{ticker.CoinInfo.FullName}</TableCell>\r\n                  <TableCell>{ticker.DISPLAY.USD.PRICE}</TableCell>\r\n                  <TableCell><span className={ticker.RAW.USD.CHANGEPCT24HOUR > 0 ? \"green_text\" : \"red_text\"}>{`${ticker.DISPLAY.USD.CHANGEPCT24HOUR} %`}</span></TableCell>\r\n                </TableRow>\r\n\r\n              ))}\r\n            </TableBody>\r\n            <TableFooter>\r\n              <TableRow>\r\n                  <TablePagination\r\n                    colSpan={5}\r\n                    count={data.length}\r\n                    rowsPerPageOptions={[ROWS_PER_PAGE]}\r\n                    rowsPerPage={ROWS_PER_PAGE}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    ActionsComponent={TablePaginationActionsWrapped}\r\n                  />\r\n              </TableRow>\r\n            </TableFooter>\r\n          </Table>\r\n\r\n      )\r\n    } else {\r\n      // If no data loaded, return an empty div\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport default TopTable","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport Spinner from 'react-spinkit'\r\n\r\nclass SimplePriceChart extends Component {\r\n\r\n  render() {\r\n\r\n    const primaryColor = this.props.theme.palette.primary.main;\r\n\r\n    // Only load chart if data given, else just show a loading spinner\r\n    if (this.props.data) {\r\n\r\n      // Timepoint.time comes as UNIX values, convert to dates\r\n      const times = this.props.data.map(timePoint =>\r\n        new Date(timePoint.time * 1000)\r\n      )\r\n\r\n      // TODO should probably generalize this to accept any type of data\r\n      const closePrices = this.props.data.map(timePoint => timePoint.close)\r\n      const data = {\r\n        labels: times,\r\n        datasets: [\r\n          {\r\n            borderColor: primaryColor,\r\n            backgroundColor: '#FFFFFF',\r\n            pointRadius: 0,\r\n            data: closePrices,\r\n          }\r\n        ],\r\n      }\r\n\r\n      // Options for the chart\r\n      const options = {\r\n        tooltips: {\r\n          enabled: false\r\n        },\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            type: 'time',\r\n            gridLines: {\r\n              display: false\r\n            },\r\n            time: {\r\n              unit: this.props.timePeriod\r\n            }\r\n          }],\r\n          yAxes: [{\r\n            gridLines: {\r\n              display: false\r\n            },\r\n            ticks: {\r\n              callback: function (value, index, values) {\r\n                // Include a dollar sign in the ticks\r\n                return '$ ' + value;\r\n              }\r\n            }\r\n          }]\r\n        }\r\n      }\r\n\r\n      // Render the chart view\r\n      return (\r\n        <div className=\"simple-price-chart\">\r\n          <Line data={data} options={options} />\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div>\r\n          <Spinner name='double-bounce' color=\"orange\" />\r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default withTheme()(SimplePriceChart);","import React, { Component } from 'react';\r\nimport './css/coin_details.css'\r\nimport SimplePriceChart from '../../util/SimplePriceChart'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Button from  'react-bootstrap/Button'\r\n\r\n// For fetching data - consider passing some of these as props\r\nconst NUM_DAYS = 10\r\nconst NUM_MIN = 120\r\nconst NUM_HR = 48\r\n\r\nconst DAY_URL = 'https://cryptodash-frankjia.herokuapp.com/cryptocompare/histoday?'\r\nconst HOUR_URL = `https://cryptodash-frankjia.herokuapp.com/cryptocompare/histohour?`\r\nconst MIN_URL =  `https://cryptodash-frankjia.herokuapp.com/cryptocompare/histominute?`\r\n\r\nconst TIME_PERIOD_DAY = \"day\"\r\nconst TIME_PERIOD_HR = \"hour\"\r\nconst TIME_PERIOD_MIN = \"minute\"\r\n\r\nclass CoinDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      chartIsLoaded: false,\r\n      chartData: null,\r\n      timePeriod: TIME_PERIOD_DAY,\r\n      chartTimePeriod: TIME_PERIOD_DAY // This is changed AFTER we load data to prevent axes from messing up\r\n    };\r\n  }\r\n\r\n  timePeriodSelected = (e, newTimePeriod) => {\r\n    e.preventDefault()\r\n    this.setState({\r\n      timePeriod: newTimePeriod\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    let ticker = this.props.ticker\r\n    // Only show details if a ticker is defined\r\n    if (ticker) {\r\n      let coinInfo = ticker.CoinInfo\r\n      let displayUSD = ticker.DISPLAY.USD\r\n      return (\r\n        <div className=\"coin-details-wrapper\">\r\n          <h2>{coinInfo.FullName}</h2>\r\n          <h4>{coinInfo.Name} | {displayUSD.PRICE}</h4>\r\n          <div className=\"coin-details-section\">\r\n            <h3 className=\"coin-details-chart-heading\">Chart</h3>\r\n            <div className=\"timeperiod-select\">\r\n              <ButtonGroup>\r\n                <Button variant=\"outline-primary\" active={this.state.timePeriod === TIME_PERIOD_DAY} onClick={(e) => {this.timePeriodSelected(e, TIME_PERIOD_DAY)}}>Day</Button>\r\n                <Button variant=\"outline-primary\" active={this.state.timePeriod === TIME_PERIOD_HR} onClick={(e) => {this.timePeriodSelected(e, TIME_PERIOD_HR)}}>Hour</Button>\r\n                <Button variant=\"outline-primary\" active={this.state.timePeriod === TIME_PERIOD_MIN} onClick={(e) => {this.timePeriodSelected(e, TIME_PERIOD_MIN)}}>Minute</Button>\r\n              </ButtonGroup>\r\n            </div>\r\n            <SimplePriceChart data={this.state.chartData} timePeriod={this.state.chartTimePeriod}></SimplePriceChart>\r\n          </div>\r\n\r\n          <div className=\"coin-details-section\">\r\n            <h3 className=\"coin-details-details-heading\">Details</h3>\r\n            <p><span className=\"detail-label\">Price:</span> <span>{displayUSD.PRICE}</span></p>\r\n            <p><span className=\"detail-label\">Market Cap:</span> <span>{displayUSD.MKTCAP}</span></p>\r\n            <p><span className=\"detail-label\">Change % (24hr):</span> <span>{displayUSD.CHANGEPCT24HOUR} %</span></p>\r\n            <p><span className=\"detail-label\">Volume (24hr):</span> <span>{displayUSD.TOTALVOLUME24HTO}</span></p>\r\n            <p><span className=\"detail-label\">Open (24hr):</span> <span>{displayUSD.OPEN24HOUR}</span></p>\r\n            <p><span className=\"detail-label\">High (24hr):</span> <span>{displayUSD.HIGH24HOUR}</span></p>\r\n            <p><span className=\"detail-label\">Low (24hr):</span> <span>{displayUSD.LOW24HOUR}</span></p>            \r\n          </div>\r\n\r\n        </div>\r\n\r\n      )\r\n    } else {\r\n      return <h1>No Ticker Selected</h1>\r\n    }\r\n  }\r\n\r\n  // Fetch data on new prop information\r\n  componentDidUpdate(prevProps, prevState) {\r\n    // Also checks if price is different (meaning the component should update its display)\r\n    if ((prevProps.ticker.CoinInfo.Name !== this.props.ticker.CoinInfo.Name) || \r\n    (prevProps.ticker.DISPLAY.USD.PRICE !== this.props.ticker.DISPLAY.USD.PRICE)) {\r\n      this.fetchData();\r\n    }\r\n    // Check if timeperiod has changed\r\n    if(prevState.timePeriod !== this.state.timePeriod) {\r\n      this.fetchData();\r\n    }\r\n  }\r\n  \r\n  // Fetch data when component mounts\r\n  componentDidMount() {\r\n    this.fetchData()\r\n  }\r\n\r\n  // Pull data for ticker\r\n  fetchData = () => {\r\n\r\n    let ticker = this.props.ticker.CoinInfo.Name\r\n    let timePeriod = this.state.timePeriod\r\n    let limit \r\n    let url\r\n\r\n    // Get appropriate URL depending on time period\r\n    if(timePeriod === \"day\") {\r\n      url = DAY_URL\r\n      limit = NUM_DAYS\r\n    } else if (timePeriod === \"hour\") {\r\n      url = HOUR_URL\r\n      limit = NUM_HR\r\n    } else {\r\n      // Default to minutes\r\n      url = MIN_URL\r\n      limit = NUM_MIN\r\n    }\r\n    // Add params\r\n    url = url + `ticker=${ticker}&limit=${limit}&key=${this.props.auth}`\r\n\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          console.log(`Details for Ticker ${ticker}`)\r\n          console.log(result)\r\n          this.setState({\r\n            chartIsLoaded: true,\r\n            chartData: result.Data,\r\n            chartTimePeriod: timePeriod\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            chartIsLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default CoinDetails","import React, { Component } from 'react';\r\nimport './css/top_ten_overview.css'\r\n\r\nimport TopTable from './components/TopTable';\r\nimport CoinDetails from './components/CoinDetails'\r\n\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\n\r\nclass TopTenOverview extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedTickerIndex: 0,\r\n    };\r\n  }\r\n\r\n  // Method to run when user clicks on a row\r\n  // This is passed to TopTable\r\n  tableRowClicked = (e, index) => {\r\n    e.preventDefault()\r\n    this.setState({\r\n      selectedTickerIndex: index\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className=\"content-box\">\r\n        <Row>\r\n          <Col xs=\"8\">\r\n            <TopTable \r\n              data={this.props.data} \r\n              rowClicked={this.tableRowClicked.bind(this)}\r\n              selectedTickerIndex={this.state.selectedTickerIndex}\r\n            />\r\n          </Col>\r\n          <Col xs=\"4\">\r\n            <CoinDetails\r\n              ticker={(this.props.data ? this.props.data[this.state.selectedTickerIndex] : null)}\r\n              auth={this.props.auth}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.data) {\r\n      this.setState({selectedTicker: this.props.data[this.state.selectedTickerIndex]})\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps() {\r\n    this.setState({\r\n      selectedTicker: this.props.data[this.state.selectedTickerIndex]\r\n    })\r\n  }\r\n\r\n}\r\n\r\nexport default TopTenOverview","import React, { Component } from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nclass MoversTable extends Component {\r\n\r\n  render() {\r\n    let data = this.props.data\r\n    if (data) {\r\n\r\n      let header;\r\n      if(this.props.showHeaders) {\r\n        header = \r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Ticker</TableCell>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell>Price (USD)</TableCell>\r\n            <TableCell>24 Hr Change (%)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n      }\r\n\r\n      return (\r\n        <Table className=\"top-movers-table\">\r\n\r\n            {header}\r\n\r\n            <TableBody>\r\n\r\n              {data.map( (ticker, index) => (\r\n\r\n                <TableRow key={ticker.CoinInfo.Name} >\r\n                  <TableCell component=\"th\" scope=\"row\">{ticker.CoinInfo.Name}</TableCell>\r\n                  <TableCell>{ticker.CoinInfo.FullName}</TableCell>\r\n                  <TableCell>{ticker.DISPLAY.USD.PRICE}</TableCell>\r\n                  <TableCell><span className={ticker.RAW.USD.CHANGEPCT24HOUR > 0 ? \"green_text\" : \"red_text\"}>{`${ticker.DISPLAY.USD.CHANGEPCT24HOUR} %`}</span></TableCell>\r\n                </TableRow>\r\n\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n      )\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport default MoversTable;\r\n","import React, { Component } from 'react';\r\nimport './css/latest_activity.css'\r\n\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport MoversTable from './components/MoversTable';\r\n\r\nclass TopTenOverview extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n      <div className=\"content-box\">\r\n        <Row>\r\n          <Col xs=\"6\">\r\n            <div className=\"latest-charts-container\">\r\n              <h4>Top Gainers</h4>\r\n              <MoversTable\r\n                  showHeaders={true}\r\n                  data={this.props.topGainers}\r\n              />\r\n            </div>\r\n          </Col>\r\n          <Col xs=\"6\">\r\n            <div className=\"latest-charts-container\">\r\n              <h4>Top Losers</h4>\r\n              <MoversTable\r\n                showHeaders={true}\r\n                data={this.props.topLosers}\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default TopTenOverview","import React, { Component } from 'react';\r\nimport Moment from 'react-moment';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport TablePaginationActionsWrapped from '../util/TablePaginationActions'\r\n\r\nimport './css/news_feed.css'\r\n\r\nconst ROWS_PER_PAGE = 5\r\n\r\nclass CoinDetails extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      data: null,\r\n      page: 0\r\n    };\r\n  }\r\n\r\n  // This gets called by the pagination class (passed as a prop)\r\n  handleChangePage = (event, page) => {\r\n    this.setState({ page });\r\n  };\r\n\r\n  render() {\r\n    \r\n    // Loading animation \r\n    var Spinner = require('react-spinkit');  \r\n\r\n    let data = this.state.data\r\n    let page = this.state.page\r\n\r\n    if (data) {\r\n\r\n      return (\r\n\r\n        <div className=\"content-box\">\r\n          <div className=\"news-feed-main-container\">\r\n            <h4>Latest News</h4> \r\n            <Table className=\"news-feed-table\">\r\n            <TableBody>\r\n              {data.slice(page * ROWS_PER_PAGE, (page + 1) * ROWS_PER_PAGE).map( (newsItem, index) => (\r\n                <TableRow key={newsItem.id} >\r\n                  <TableCell>\r\n                    <div className=\"news-item\">\r\n                      <h5><a href={newsItem.url} target=\"_blank\" rel=\"noopener noreferrer\">{newsItem.title}</a></h5>\r\n                      <p className=\"accent-text\"><Moment format=\"LT | MMM DD YYYY\">{newsItem.published_at}</Moment> | <span className=\"bolded\">{newsItem.source.title}</span></p>\r\n                    </div>   \r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n            <TableFooter>\r\n              <TableRow>\r\n                  <TablePagination\r\n                    colSpan={1}\r\n                    count={data.length}\r\n                    rowsPerPageOptions={[ROWS_PER_PAGE]}\r\n                    rowsPerPage={ROWS_PER_PAGE}\r\n                    page={this.state.page}\r\n                    onChangePage={this.handleChangePage}\r\n                    ActionsComponent={TablePaginationActionsWrapped}\r\n                  />\r\n              </TableRow>\r\n            </TableFooter>\r\n          </Table>\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"content-box\">\r\n          <div className=\"loading-animation-content-container\">\r\n            <div className=\"loading-animation-news\">\r\n              <Spinner name='double-bounce' color=\"orange\"/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData()\r\n    // Continue fetching every 5 min\r\n    this.fetchInterval = setInterval(() => {\r\n      this.fetchData()\r\n    }, 300000) \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.fetchInterval)\r\n  }\r\n\r\n  // Pull data for ticker\r\n  fetchData = () => {\r\n\r\n    fetch(`https://cryptodash-frankjia.herokuapp.com/cryptopanic/news?key=${this.props.auth}`)\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            data: result.results\r\n          });\r\n          console.log(\"Cryptopanic Newsfeed\")\r\n          console.log(result.results)\r\n        },\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default CoinDetails","import React, { Component } from 'react';\r\nimport TopTenOverview from './TopTenOverview'\r\nimport LatestActivity from './LatestActivity'\r\nimport NewsFeed from './NewsFeed'\r\n\r\nimport './css/market_overview.css'\r\n\r\nclass MarketOverview extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            data: null\r\n        };\r\n    }\r\n\r\n    render() {\r\n\r\n        // Loading animation \r\n        var Spinner = require('react-spinkit');  \r\n        let topChartsData = this.state.data\r\n\r\n        // Wait for data to be passed in\r\n        if(topChartsData) {\r\n\r\n        // Slice to create a new array\r\n        // Get largest movers\r\n        let sortedBy24HrPrice = topChartsData.slice().sort((a, b) => a.RAW.USD.CHANGEPCT24HOUR < b.RAW.USD.CHANGEPCT24HOUR)\r\n        let topTenGainers = sortedBy24HrPrice.slice(0, 10)\r\n        let topTenLosers = sortedBy24HrPrice.slice(-10).reverse()\r\n\r\n        return (\r\n            <div className=\"market_overview\">\r\n            \r\n                <div className=\"mkt_overview_header\">\r\n                    <h1>\r\n                    Market Overview\r\n                    </h1>\r\n                </div>\r\n                \r\n                <div className=\"main_container\">\r\n                    <TopTenOverview data={topChartsData} auth={this.props.keys.cryptocompare}/>\r\n                </div>\r\n\r\n                <div className=\"main_container\">\r\n                    <LatestActivity topGainers={topTenGainers} topLosers={topTenLosers}/>\r\n                </div>\r\n\r\n                <div className=\"main_container\">\r\n                    <NewsFeed auth={this.props.keys.cryptopanic}/>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n        } else {\r\n\r\n            // If data isn't loaded, display a loading animation\r\n            return (\r\n                <div className=\"loading-animation-container\">\r\n                <div className=\"loading-animation-main\">\r\n                    <Spinner name='double-bounce' color=\"orange\"/>\r\n                </div>\r\n                </div>\r\n            )\r\n\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    // Pull data from backend proxy for Cryptocompare\r\n    fetchData = () => {\r\n\r\n        let url = 'https://cryptodash-frankjia.herokuapp.com/cryptocompare/top'\r\n        url = url + `?key=${this.props.keys.cryptocompare}`\r\n\r\n        fetch(url)\r\n        .then(res => res.json())\r\n        .then(\r\n        (result) => {\r\n            console.log(\"Cryptcompare top tickers\")\r\n            console.log(result)\r\n            this.setState({\r\n            isLoaded: true,\r\n            data: result.Data\r\n            });\r\n        },\r\n        (error) => {\r\n            this.setState({\r\n            isLoaded: true,\r\n            error\r\n            });\r\n        }\r\n        )\r\n        \r\n    }\r\n\r\n    // This will grab all the data used to render the market overview\r\n    componentDidMount() {\r\n\r\n        this.fetchData();\r\n        // Continue fetching every 5 min\r\n        this.fetchInterval = setInterval(() => {\r\n        this.fetchData()\r\n        }, 300000) \r\n    \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.fetchInterval)\r\n    }\r\n\r\n}\r\n\r\nexport default MarketOverview","import React from 'react';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\r\n\r\n/**\r\n * Component for Sortable Header\r\n */\r\nclass SortTableHeader extends React.Component {\r\n\r\n    createSortHandler = property => event => {\r\n        this.props.onRequestSort(event, property);\r\n    };\r\n    \r\n      render() {\r\n        const { order, orderBy, headers } = this.props;\r\n    \r\n        return (\r\n          <TableHead>\r\n            <TableRow>\r\n              {headers.map(\r\n                header => (\r\n                  <TableCell\r\n                    key={header.id}\r\n                    sortDirection={orderBy === header.id ? order : false}\r\n                  >\r\n                    <Tooltip\r\n                      title=\"Sort\"\r\n                      placement='bottom-end'\r\n                      enterDelay={300}\r\n                    >\r\n                      <TableSortLabel\r\n                        active={orderBy === header.id}\r\n                        direction={order}\r\n                        onClick={this.createSortHandler(header.id)}\r\n                      >\r\n                        {header.label}\r\n                      </TableSortLabel>\r\n                    </Tooltip>\r\n                  </TableCell>\r\n                ),\r\n                this,\r\n              )}\r\n            </TableRow>\r\n          </TableHead>\r\n        );\r\n      }\r\n  }\r\n  \r\n  // Exported pagination with styles from theme\r\n  export default withStyles({}, { withTheme: true })(\r\n    SortTableHeader,\r\n  );","import React, { Component } from 'react';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nimport TablePaginationActionsWrapped from '../../util/TablePaginationActions'\r\nimport SortTableHeader from '../../util/SortTableHeader'\r\n\r\nimport Spinner from 'react-spinkit'\r\n\r\nconst ROWS_PER_PAGE = 10\r\nconst ASC = 'asc'\r\nconst DESC = 'desc'\r\nconst TICKER_COL_ID = 'ticker'\r\nconst BALANCE_COL_ID = 'balance'\r\nconst BTC_VAL_COL_ID = 'val_btc'\r\nconst USD_VAL_COL_ID = 'val_usd'\r\n// Define the headers of the table\r\nconst TABLE_HEADERS = [\r\n    { id: TICKER_COL_ID, label: 'Ticker' },\r\n    { id: BALANCE_COL_ID, label: 'Balance' },\r\n    { id: BTC_VAL_COL_ID, label: 'Value (BTC)' },\r\n    { id: USD_VAL_COL_ID, label: 'Value (USD)' },\r\n]\r\nconst NUM_COLS = TABLE_HEADERS.count\r\n\r\nclass Holdings extends Component {\r\n\r\n    state = {\r\n        page: 0,\r\n        orderBy: TICKER_COL_ID,\r\n        order: ASC,\r\n    };\r\n\r\n    // This gets called by the pagination class (passed as a prop)\r\n    handleChangePage = (event, page) => {\r\n        this.setState({ page });\r\n    };\r\n\r\n    // This gets called by the sorting table header (passed as a prop)\r\n    handleRequestSort = (event, property) => {\r\n        const orderBy = property;\r\n        let order = DESC;\r\n        if (this.state.orderBy === property && this.state.order === DESC) {\r\n            order = ASC;\r\n        }\r\n        // Also reset page\r\n        this.setState({ order, orderBy, page: 0 });\r\n    };\r\n\r\n    // Sort method defined for each column\r\n    getSortingFunction = (orderBy) => {\r\n        if (orderBy === BALANCE_COL_ID) {\r\n            return (a, b) => {\r\n                if (a.amount > b.amount) return 1\r\n                else return -1\r\n            }\r\n        } else if (orderBy === TICKER_COL_ID) {\r\n            // For ticker, use the standard string sort method\r\n            return (a, b) => {\r\n                if (a.ticker.toLowerCase() > b.ticker.toLowerCase()) return 1\r\n                else return -1\r\n            }\r\n        } else if (orderBy === BTC_VAL_COL_ID) {\r\n            return (a, b) => {\r\n                if (a.btcVal > b.btcVal) return 1\r\n                else return -1\r\n            }\r\n        } else if (orderBy === USD_VAL_COL_ID) {\r\n            return (a, b) => {\r\n                if (a.usdVal > b.usdVal) return 1\r\n                else return -1\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let holdings = this.props.holdings\r\n\r\n        // Only load table if data is available\r\n        if (holdings) {\r\n            // Get current state\r\n            const { order, orderBy, page } = this.state;\r\n\r\n            // Get sorting function & just reverse sorted array if we want it in desc order\r\n            holdings = holdings.sort(this.getSortingFunction(orderBy))\r\n            if (order === 'desc') {\r\n                holdings = holdings.reverse()\r\n            }\r\n            // # of empty rows to populate\r\n            const numEmptyRows = ROWS_PER_PAGE - Math.min(ROWS_PER_PAGE, holdings.length - page * ROWS_PER_PAGE)\r\n\r\n            // Views to return\r\n            return (\r\n                <Table className=\"holdings-table\">\r\n\r\n                    {/* Header with sort function */}\r\n                    <SortTableHeader\r\n                        headers={TABLE_HEADERS}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onRequestSort={this.handleRequestSort}\r\n                    />\r\n\r\n                    {/* Rows populated by each holding */}\r\n                    <TableBody>\r\n                        {holdings.slice(page * ROWS_PER_PAGE, (page + 1) * ROWS_PER_PAGE).map((holding, index) => (\r\n\r\n                            <TableRow key={index}>\r\n                                <TableCell>{holding.ticker}</TableCell>\r\n                                <TableCell>{holding.amount.toFixed(4)}</TableCell>\r\n                                <TableCell>\r\n                                    {holding.btcVal > Math.pow(10, -5) ? \r\n                                    holding.btcVal.toFixed(5) : `${(holding.btcVal * Math.pow(10, 8)).toFixed(0)} sats` }\r\n                                </TableCell>\r\n                                <TableCell>{`$ ${holding.usdVal.toFixed(2)}`}</TableCell>\r\n                            </TableRow>\r\n\r\n                        ))}\r\n\r\n                        {/* If empty rows needed, populate them */}\r\n                        {numEmptyRows > 0 && (\r\n                            <TableRow style={{ height: 49 * numEmptyRows }}>\r\n                                <TableCell colSpan={NUM_COLS} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n\r\n                    {/* The Footer has Pagination */}\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            <TablePagination\r\n                                colSpan={NUM_COLS}\r\n                                count={holdings.length}\r\n                                rowsPerPageOptions={[ROWS_PER_PAGE]}\r\n                                rowsPerPage={ROWS_PER_PAGE}\r\n                                page={this.state.page}\r\n                                onChangePage={this.handleChangePage}\r\n                                ActionsComponent={TablePaginationActionsWrapped}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"loading-animation-container\">\r\n                <div className=\"loading-animation-main\">\r\n                    <Spinner name='double-bounce' color=\"orange\"/>\r\n                </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Holdings","import React, { Component } from 'react'\r\n\r\nimport Holdings from './components/Holdings'\r\n\r\nclass Portfolio extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            binanceHoldings: null\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Render method\r\n    */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Holdings holdings={this.state.binanceHoldings}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Pull required data for portfolio component\r\n     */\r\n    fetchData = () => {\r\n\r\n        let binance_url = 'https://cryptodash-frankjia.herokuapp.com/binance/portfolio'\r\n        binance_url = binance_url + `?key=${this.props.keys.binance.key}&secret=${this.props.keys.binance.secret}`\r\n\r\n        // This gets a list of total balances from Binance\r\n        fetch(binance_url)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(\"Binance Call Result\")\r\n                    console.log(result)\r\n                    const balances = result\r\n\r\n                    // This will fetch the conversion prices from CryptoCompare\r\n                    if (balances) {\r\n                        let prices_url = 'https://cryptodash-frankjia.herokuapp.com/cryptocompare/prices'\r\n                        // Add auth\r\n                        prices_url = prices_url + `?key=${this.props.keys.cryptocompare}`\r\n                        // Now add the tickers\r\n                        let holdings = Object.keys(balances)\r\n                        \r\n                        prices_url = prices_url + `&tickers=${holdings.join()}`\r\n\r\n                        fetch(prices_url)\r\n                            .then(res => res.json())\r\n                            .then(\r\n                                (result) => {\r\n\r\n                                    console.log(\"Fetched price conversions\")\r\n                                    console.log(result)\r\n\r\n                                    // Construct complete ticker objects\r\n                                    let holdings = []\r\n                                    for(var ticker in balances) {\r\n                                        const balance = balances[ticker]\r\n                                        const conversion = result[ticker] // This might not exist if Cryptocompare has no data on this\r\n                                        let btcConversion = 0, usdConversion = 0 \r\n                                        if (conversion) {\r\n                                            btcConversion = conversion.BTC ? conversion.BTC : 0 \r\n                                            usdConversion = conversion.USD ? conversion.USD : 0 \r\n                                        }\r\n                                        holdings.push({\r\n                                            'ticker': ticker,\r\n                                            'amount': balance,\r\n                                            'btcVal': balance * btcConversion,\r\n                                            'usdVal': balance * usdConversion\r\n                                        })\r\n                                    }\r\n\r\n                                    console.log(\"Complete holdings\")\r\n                                    console.log(holdings)\r\n\r\n                                    this.setState({\r\n                                        isLoaded: true,\r\n                                        binanceHoldings: holdings\r\n                                    });\r\n                                },\r\n                                (error) => {\r\n                                    this.setState({\r\n                                        isLoaded: true,\r\n                                        error\r\n                                    })\r\n                                })\r\n                    }\r\n\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    })\r\n                })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData()\r\n    }\r\n}\r\n\r\nexport default Portfolio ","import React, { Component } from 'react'\r\n\r\nimport { withTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport MarketOverview from './market_overview/MarketOverview'\r\nimport Portfolio from './portfolio/Portfolio'\r\n\r\nconst MKT_OVERVIEW = \"Market Overview\"\r\nconst PORTFOLIO = \"Portfolio\"\r\n\r\nclass Dashboard extends Component {\r\n\r\n  state = {\r\n    open: false,\r\n    selection: MKT_OVERVIEW\r\n  };\r\n\r\n    handleDrawerOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleDrawerClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleSelect = (e, text) => {\r\n        e.preventDefault()\r\n        this.setState({selection: text})\r\n        this.handleDrawerClose()\r\n    }\r\n\r\n  render() {\r\n\r\n    const { open } = this.state;\r\n    const selection = this.state.selection\r\n    // This selects the page to show from the current navigation state\r\n    let pageToShow\r\n    if (selection === MKT_OVERVIEW) {\r\n        pageToShow = <MarketOverview keys={this.props.keys}/>\r\n    } else if (selection === PORTFOLIO) {\r\n        pageToShow = <Portfolio keys={this.props.keys}/>\r\n    }\r\n\r\n    return (\r\n\r\n      <div>\r\n        <AppBar>\r\n            <Toolbar>\r\n                <IconButton color=\"inherit\" onClick={this.handleDrawerOpen}>\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <div className=\"appbar-title\">\r\n                    <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                        Cryptocurrency Dashboard\r\n                    </Typography>\r\n                </div>\r\n            </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"persistent\"\r\n          anchor=\"left\"\r\n          open={open}\r\n        >\r\n            <IconButton onClick={this.handleDrawerClose}>\r\n                <ChevronLeftIcon/>\r\n            </IconButton>\r\n\r\n            <Divider />\r\n\r\n            <List>\r\n                <ListItem \r\n                    button \r\n                    selected={this.state.selection === MKT_OVERVIEW} \r\n                    key={MKT_OVERVIEW}\r\n                    onClick= {(e) => this.handleSelect(e, MKT_OVERVIEW)}\r\n                >\r\n                    <ListItemText primary={MKT_OVERVIEW}/>\r\n                </ListItem>\r\n\r\n                <ListItem \r\n                    button \r\n                    selected={this.state.selection === PORTFOLIO} \r\n                    key={PORTFOLIO}\r\n                    onClick= {(e) => this.handleSelect(e, PORTFOLIO)}\r\n                >\r\n                    <ListItemText primary={PORTFOLIO} />\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n        \r\n        <div className=\"overlay\" hidden={!this.state.open}/> \r\n        <main className=\"dashboard-wrapper\">\r\n            {pageToShow}\r\n        </main>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme()(Dashboard);\r\n","import React, { Component } from 'react';\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button'\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nimport './css/api_key_form.css'\r\n\r\nclass ApiKeyForm extends Component {\r\n\r\n    // TODO we can prepopulate from current local storage\r\n\r\n    state = {\r\n        \"cryptopanicKey\": null,\r\n        \"cryptocompareKey\": null,\r\n        \"binanceKey\": null,\r\n        \"binanceSecret\": null\r\n    }\r\n\r\n    // Form methods\r\n    onFieldChanged = (event, stateKey) => {\r\n        this.setState({\r\n            [stateKey]: event.target.value\r\n        })\r\n    };\r\n\r\n    // Parent callback is a function passed in as a prop to notify the main App to reload\r\n    onFormSubmission = (event, parentCallback) => {\r\n        // TODO we need more validation\r\n        event.preventDefault()\r\n        if (this.state.cryptopanicKey && this.state.cryptocompareKey\r\n            && this.state.binanceKey && this.state.binanceSecret) {\r\n            parentCallback(this.state)\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n\r\n            <form className=\"api-key-form-container\">\r\n\r\n                <h4>Please create and enter the following API keys to use the dashboard.</h4>\r\n                <p>Sign up directly at <a href=\"https://min-api.cryptocompare.com/pricing\" target=\"_blank\" rel=\"noopener noreferrer\">CryptoCompare</a> \r\n                and <a href=\"https://cryptopanic.com/developers/api/\" target=\"_blank\" rel=\"noopener noreferrer\">CryptoPanic</a> for their free API \r\n                services. These keys will be stored in your browser &amp; will not be shared. Binance READ-ONLY \r\n                key &amp; secret are also required for portfolio analysis</p>\r\n\r\n                <div>\r\n                <TextField\r\n                id=\"cryptocompare\"\r\n                label=\"CryptoCompare Key\"\r\n                placeholder=\"Enter Your API Key\"\r\n                className=\"api-form-field\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {this.onFieldChanged(e, \"cryptocompareKey\")}}\r\n                />\r\n                </div>\r\n\r\n                \r\n                <div>\r\n                <TextField\r\n                id=\"cryptopanic\"\r\n                label=\"CryptoPanic Key\"\r\n                placeholder=\"Enter Your API Key\"\r\n                className=\"api-form-field\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {this.onFieldChanged(e, \"cryptopanicKey\")}}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <TextField\r\n                id=\"binance-key\"\r\n                label=\"Binance Key\"\r\n                placeholder=\"Enter Your API Key\"\r\n                className=\"api-form-field\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {this.onFieldChanged(e, \"binanceKey\")}}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <TextField\r\n                id=\"binance-secret\"\r\n                label=\"Binance Secret\"\r\n                placeholder=\"Enter Your API Secret\"\r\n                className=\"api-form-field\"\r\n                margin=\"normal\"\r\n                variant=\"outlined\"\r\n                onChange={(e) => {this.onFieldChanged(e, \"binanceSecret\")}}\r\n                />\r\n                </div>\r\n\r\n                <div>\r\n                <Button variant=\"contained\" color=\"primary\" className=\"api-form-submit\"\r\n                        onClick={(e) => this.onFormSubmission(e, this.props.newKeysEntered)}>\r\n                    Submit\r\n                </Button>\r\n                </div>\r\n\r\n            </form>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default withStyles({})(ApiKeyForm);","import React, { Component } from 'react'\r\nimport Dashboard from './Dashboard'\r\nimport ls from 'local-storage'\r\nimport ApiKeyForm from './settings/ApiKeyForm';\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        keys: {\r\n          \"cryptocompare\": null,\r\n          \"cryptopanic\": null,\r\n          \"binance\": null,\r\n        }\r\n    };\r\n  }\r\n\r\n  newKeysEntered = (keys) => {\r\n    ls.set(\"cryptopanicKey\", keys.cryptopanicKey)\r\n    ls.set(\"cryptocompareKey\", keys.cryptocompareKey)\r\n    ls.set(\"binanceKey\", keys.binanceKey)\r\n    ls.set(\"binanceSecret\", keys.binanceSecret)\r\n    window.location.reload()\r\n  };\r\n\r\n  render() {\r\n\r\n    // If keys are entered, go straight to dashboard\r\n    if (this.state.keys.cryptocompare && this.state.keys.cryptocompare\r\n        && this.state.keys.binance) {\r\n      // Load main app\r\n      return (\r\n        <Dashboard keys={this.state.keys}/>\r\n      )\r\n    }\r\n\r\n    // No keys entered, render the input component\r\n    else {\r\n      return (\r\n        <ApiKeyForm newKeysEntered={this.newKeysEntered}></ApiKeyForm>\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  // Initialize keys before component mounts\r\n  componentWillMount() {\r\n\r\n    let cryptocompareKey = ls.get(\"cryptocompareKey\")\r\n    let cryptopanicKey = ls.get(\"cryptopanicKey\")\r\n    let binanceKey = ls.get(\"binanceKey\")\r\n    let binanceSecret = ls.get(\"binanceSecret\")\r\n\r\n    // If keys exist, then start pulling data\r\n    if(cryptocompareKey && cryptopanicKey && binanceKey && binanceSecret) {\r\n      let keys = {\r\n        \"cryptocompare\": cryptocompareKey,\r\n        \"cryptopanic\": cryptopanicKey,\r\n        \"binance\": {\"key\": binanceKey, \"secret\": binanceSecret}\r\n      }\r\n      this.setState({keys})\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default App \r\n","import React from 'react';\r\nimport './index.css';\r\nimport { render } from 'react-dom';\r\nimport App from './App';\r\n\r\n// Themes\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport blue from '@material-ui/core/colors/blue'\r\nimport amber from '@material-ui/core/colors/amber'\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: blue,\r\n      secondary: amber,\r\n    },\r\n    typography: {\r\n        useNextVariants: true,\r\n        fontFamily: [\r\n          'Roboto',\r\n          'sans-serif',\r\n        ].join(','),\r\n    },\r\n});\r\n\r\nfunction RootApp() {\r\n  return (\r\n    <MuiThemeProvider theme={theme}>\r\n    <App/>\r\n    </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nrender(<RootApp />, document.querySelector('#root'));\r\n"],"sourceRoot":""}